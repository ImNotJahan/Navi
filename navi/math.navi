(set (factorial x)
	(if (< x 2)
		1
		(* x (factorial (- x 1)))))
		
(set (remove_decimal f)
	(set (remove_decimal_helper f i)
		(if (= (int f) f)
			(list (int f) i)
			(remove_decimal_helper (* f 10) (+ i 1))))
	(remove_decimal_helper f 0))

(set (gcd . xs)
	(set (gcd_inner a b)
		(if (= b 0) a (gcd_inner b (remainder a b))))
	(abs (fold_left gcd_inner 0 xs)))
	
(set (divisible a b) (= (remainder a b) 0))
	
(set (exp num pow)
	(if (= pow 0) then_return
		1
		else (if (even? pow) then
			(square (exp num (/ pow 2))) otherwise
			(* num (exp num (- pow 1))))))

(set (square num) (* num num))
(set (cube num) (* num (* num num)))

(set (abs x) (if (< x 0) (* x -1) x))

(set pi to 3.14159)
(set e to 2.71828)

(set (even? x) (= (remainder x 2) 0))
(set (odd? x) (not (even? x)))

(set (floor x) 
	~ changing a float to an int truncates it
	(set rounded_number to (int x))
	
	(if (and (< x 0) (not= rounded_number x))
		then_return (- rounded_number 1)
		otherwise_return rounded_number))

(set (round x)
	(set rounded_number to (floor x))
	
	(if (>= (- x rounded_number) 0.5) 
		then_return (+ rounded_number 1)
		otherwise_return rounded_number))
		
(set (ceiling x) 
	(set rounded_number to (floor x))
	
	(if (not= rounded_number x)
		then_return (+ rounded_number 1)
		otherwise_return rounded_number))
		
(set (logarithm b x)
	(set x to (exp x 10))
	(set temp to b)
	(set result to 1)
	
	(while (> x temp) do
		(++ result)
		(change temp to (exp b result)))
		
	(/ result 10))
	
(set (root b x)
	(set temp to 1)
	(set result to 1)
	
	(while (> x temp) do
		(++ result)
		(change temp to (exp result b)))
		
	result)
	
(set (sqrt x)
	(set (iter guess x)
		(if (threshold guess x)
			guess
			(iter (improve guess x) x)))
			
	(set (improve guess x)
		(average guess (/ x guess)))
	
	(set (threshold guess x)
		(< (abs (- (square guess) x)) 0.001))
		
	(iter 1.0 x))
	
~ calculates in radians
(set (sine angle)
	(set (identity x)
		(- (* 3 x) (* 4 (cube x))))

	~ if an angle is small enough it's more or less itself
	(if (< (abs angle) 0.1)
		angle
		(identity (sine (/ angle 3.0)))))
		
(set (rad_to_deg x)
	(/
		(* x 180)
		pi))

(set (deg_to_rad x)
	(/
		(* x pi)
		180))
		
(set (cosine x)
	(sqrt (- 
		1 
		(square (sine x)))))
		
(set (tangent x) (/ (sine x) (cosine x)))

(set (average . args) 
	(/
		(apply + args)
		(length args)))
		
(set (sum sequence start sugar end)
	(if (> start end) 
		0
		(+ (sequence start)
			(sum sequence (+ start 1) 'through end))))