(set (factorial x)
	(if (< x 2)
		1
		(* x (factorial (- x 1)))))
		
(set (remove_decimal f)
	(set (remove_decimal_helper f i)
		(if (= (int f) f)
			(list (int f) i)
			(remove_decimal_helper (* f 10) (+ i 1))))
	(remove_decimal_helper f 0))

(set (gcd . xs)
	(set (gcd_inner a b)
		(if (= b 0) a (gcd_inner b (remainder a b))))
	(abs (fold_left gcd_inner 0 xs)))
	
(set (divisible a b) (= (remainder a b) 0))
	
(set (exp num pow)
	(if (< pow 1)
		1
		(* num (exp num (- pow 1)))))

(set (square num) (exp num 2))

(set (abs x) (if (< x 0) (* x -1) x))

(set pi to 3.14159)
(set e to 2.71828)

(set (even? x) (= (remainder x 2) 0))
(set (odd? x) (not (even? x)))

(set (floor x) 
	~ changing a float to an int truncates it
	(set rounded_number to (int x))
	
	(if (and (< x 0) (not= rounded_number x))
		then_return (- rounded_number 1)
		otherwise_return rounded_number))

(set (round x)
	(set rounded_number to (floor x))
	
	(if (>= (- x rounded_number) 0.5) 
		then_return (+ rounded_number 1)
		otherwise_return rounded_number))
		
(set (ceiling x) 
	(set rounded_number to (floor x))
	
	(if (not= rounded_number x)
		then_return (+ rounded_number 1)
		otherwise_return rounded_number))
		
(set (logarithm b x)
	(set x to (exp x 10))
	(set temp to b)
	(set result to 1)
	
	(while (> x temp) do
		(++ result)
		(change temp to (exp b result)))
		
	(/ result 10))
	
(set (root b x)
	(set temp to 1)
	(set result to 1)
	
	(while (> x temp) do
		(++ result)
		(change temp to (exp result b)))
		
	result)